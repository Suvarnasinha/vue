Sure! Here is the complete code setup for the router configuration, along with the required components:

### Router Configuration (`router/index.js`)

```js
import { createRouter, createWebHistory } from 'vue-router';
import Users from './components/Users.vue';
import PageNotFound from './components/PageNotFound.vue';
import UserDetails from './components/UserDetails.vue';
import Albums from './components/Albums.vue';
import AlbumDetails from './components/AlbumDetails.vue';
import PostForm from './components/PostForm.vue';
import TodoForm from './components/TodoForm.vue';

const routes = [
  {
    name: 'Users',
    path: '/',
    component: Users,
  },
  {
    name: 'UserDetails',
    path: '/users/:userId',
    component: UserDetails,
  },
  {
    name: 'UserPosts',
    path: '/users/:userId/posts',
    component: PostForm,
  },
  {
    name: 'UserTodos',
    path: '/users/:userId/todos',
    component: TodoForm,
  },
  {
    name: 'Albums',
    path: '/albums',
    component: Albums,
  },
  {
    name: 'AlbumDetails',
    path: '/albums/:albumId',
    component: AlbumDetails,
  },
  {
    name: 'PageNotFound',
    path: '/:pathMatch(.*)*',
    component: PageNotFound,
  },
];

const router = createRouter({
  history: createWebHistory(),
  routes,
});

export default router;
```

### Users Component (`components/Users.vue`)

```html
<template>
  <div>
    <h1>Users</h1>
    <ul>
      <li v-for="user in users" :key="user.id">
        <router-link :to="{ name: 'UserDetails', params: { userId: user.id } }">{{ user.name }}</router-link>
      </li>
    </ul>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue';

const users = ref([]);

onMounted(async () => {
  const response = await fetch('https://jsonplaceholder.typicode.com/users');
  users.value = await response.json();
});
</script>
```

### UserDetails Component (`components/UserDetails.vue`)

```html
<template>
  <div>
    <h1>User Details for {{ userId }}</h1>
    <nav>
      <router-link :to="{ name: 'UserPosts', params: { userId: userId } }">Posts</router-link>
      <router-link :to="{ name: 'UserTodos', params: { userId: userId } }">Todos</router-link>
    </nav>
    <!-- User details content -->
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { useRoute } from 'vue-router';

const route = useRoute();
const userId = ref(route.params.userId);
</script>
```

### PostForm Component (`components/PostForm.vue`)

```html
<template>
  <div>
    <h2>Add New Post</h2>
    <form @submit.prevent="submitPost">
      <div>
        <label for="title">Title:</label>
        <input type="text" v-model="title" id="title" required />
      </div>
      <div>
        <label for="body">Body:</label>
        <textarea v-model="body" id="body" required></textarea>
      </div>
      <button type="submit">Submit</button>
    </form>

    <h2>Posts</h2>
    <ul>
      <li v-for="post in posts" :key="post.id">
        <strong>{{ post.title }}</strong> - {{ post.body }}
      </li>
    </ul>
  </div>
</template>

<script setup>
import { ref, defineProps, onMounted } from 'vue';

const props = defineProps({
  userId: Number,
});

const title = ref('');
const body = ref('');
const posts = ref([]);

const submitPost = async () => {
  const newPost = {
    title: title.value,
    body: body.value,
    userId: props.userId,
  };

  const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(newPost),
  });

  const result = await response.json();
  console.log('Created Post:', result);

  // Add the new post to the posts array
  posts.value.push(result);

  // Reset form fields
  title.value = '';
  body.value = '';
};

onMounted(async () => {
  const response = await fetch(`https://jsonplaceholder.typicode.com/users/${props.userId}/posts`);
  posts.value = await response.json();
});
</script>
```

### TodoForm Component (`components/TodoForm.vue`)

```html
<template>
  <div>
    <h2>Add New Todo</h2>
    <form @submit.prevent="submitTodo">
      <div>
        <label for="title">Title:</label>
        <input type="text" v-model="title" id="title" required />
      </div>
      <div>
        <label for="completed">Completed:</label>
        <input type="checkbox" v-model="completed" id="completed" />
      </div>
      <button type="submit">Submit</button>
    </form>

    <h2>Todos</h2>
    <ul>
      <li v-for="todo in todos" :key="todo.id">
        {{ todo.title }} - <strong :style="{ color: todo.completed ? '#28a745' : '#dc3545' }">
          {{ todo.completed ? 'Completed' : 'Pending' }}
        </strong>
      </li>
    </ul>
  </div>
</template>

<script setup>
import { ref, defineProps, onMounted } from 'vue';

const props = defineProps({
  userId: Number,
});

const title = ref('');
const completed = ref(false);
const todos = ref([]);

const submitTodo = async () => {
  const newTodo = {
    title: title.value,
    completed: completed.value,
    userId: props.userId,
  };

  const response = await fetch('https://jsonplaceholder.typicode.com/todos', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(newTodo),
  });

  const result = await response.json();
  console.log('Created Todo:', result);

  // Add the new todo to the todos array
  todos.value.push(result);

  // Reset form fields
  title.value = '';
  completed.value = false;
};

onMounted(async () => {
  const response = await fetch(`https://jsonplaceholder.typicode.com/users/${props.userId}/todos`);
  todos.value = await response.json();
});
</script>
```

### Albums Component (`components/Albums.vue`)

```html
<template>
  <div>
    <h1>Albums</h1>
    <ul>
      <li v-for="album in albums" :key="album.id">
        <router-link :to="{ name: 'AlbumDetails', params: { albumId: album.id } }">{{ album.title }}</router-link>
      </li>
    </ul>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue';

const albums = ref([]);

onMounted(async () => {
  const response = await fetch('https://jsonplaceholder.typicode.com/albums');
  albums.value = await response.json();
});
</script>
```

### AlbumDetails Component (`components/AlbumDetails.vue`)

```html
<template>
  <div>
    <h1>Album Details for {{ albumId }}</h1>
    <ul>
      <li v-for="photo in photos" :key="photo.id">
        <img :src="photo.thumbnailUrl" :alt="photo.title" />
        <p>{{ photo.title }}</p>
      </li>
    </ul>
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { useRoute } from 'vue-router';

const route = useRoute();
const albumId = ref(route.params.albumId);
const photos = ref([]);

onMounted(async () => {
  const response = await fetch(`https://jsonplaceholder.typicode.com/albums/${albumId.value}/photos`);
  photos.value = await response.json();
});
</script>
```

### PageNotFound Component (`components/PageNotFound.vue`)

```html
<template>
  <div>
    <h1>Page Not Found</h1>
    <router-link to="/">Go back to home</router-link>
  </div>
</template>
```

### Main App Setup (`App.vue`)

```html
<template>
  <div id="app">
    <router-view />
  </div>
</template>

<script setup>
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
</style>
```

### Main Entry Point (`main.js`)

```js
import { createApp } from 'vue';
import App from './App.vue';
import router from './router';

createApp(App).use(router).mount('#app');
```

### Project Structure

```
src/
├── components/


│   ├── Users.vue
│   ├── PageNotFound.vue
│   ├── UserDetails.vue
│   ├── PostForm.vue
│   ├── TodoForm.vue
│   ├── Albums.vue
│   ├── AlbumDetails.vue
├── router/
│   └── index.js
├── App.vue
└── main.js
```

This should provide a complete, functional Vue 3 application with the described routing and component setup.